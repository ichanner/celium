import express from 'express';
import mongoose from "mongoose";
import dotenv from 'dotenv';
import multer from 'multer';
import { fileURLToPath } from 'url';
import path, { dirname } from 'path';
import { v4 as uuid } from 'uuid';
import { createServer } from 'http';
import { Server } from 'socket.io';
import fs from 'fs';
import cors from 'cors';
import passport from 'passport';
import { Strategy } from 'passport-google-oauth20';
import ffmpeg from 'fluent-ffmpeg';
import session from 'express-session';
const app = express();
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
// dependency injection
// agenda tasks
// open cv frame proccesor for colors
// ffmpeg -i b5e8c579-5d65-45f5-87cc-2ba619e77cd0.mp4 -filter:v "scale=-1:320" -pix_fmt rgb24 -to 00:00:05 out.gif
// ffmpeg -i b5e8c579-5d65-45f5-87cc-2ba619e77cd0.mp4  -vframes 1 -filter:v "scale=-1:320" -pix_fmt rgb24 -ss 00:00:01 out.jpg
dotenv.config();
const DESTINATION = __dirname + '/uploads';
const storage = multer.diskStorage({
    destination: DESTINATION,
    filename: (req, file, cb) => {
        const filename = uuid() + "." + file.originalname.split('.')[1];
        req.filename = filename;
        cb(null, filename);
    }
});
const upload = multer({ storage });
const server = createServer(app);
async function initDB() {
    const options = {
        useNewUrlParser: true,
        useUnifiedTopology: true,
    };
    const conn = process.env.DB_URI;
    await mongoose.connect(conn, options);
}
const io = new Server(server, {
    cors: {
        origin: "http://localhost:3000",
        methods: ["GET", "POST"],
        // transports: ["websocket", "polling"],
        credentials: true
    },
    allowEIO3: true
});
io.on('connection', (socket) => {
    console.log("new connection");
});
function isLoggedIn(req, res, next) {
    if (!req.user)
        res.status(403).end();
    else
        next();
}
function createVideoPreviews() {
    const video_path = path.join(__dirname, '/uploads/b5e8c579-5d65-45f5-87cc-2ba619e77cd0.mp4');
    ffmpeg()
        .input(video_path)
        .videoFilter("scale=-1:320")
        .duration('00:00:05')
        .outputOptions("-pix_fmt rgb24")
        .output(path.join(__dirname, '/uploads/random.gif'))
        .on('error', (err) => console.log(err))
        .run();
    ffmpeg()
        .input(video_path)
        .frames(1)
        .videoFilter('scale=-1:320')
        .seek('00:00:01')
        .output(path.join(__dirname, '/uploads/random.jpg'))
        .run();
}
passport.use(new Strategy({
    clientID: "70860035429-i2403vfggulhum2d46s3h04qe88g7gdo.apps.googleusercontent.com",
    clientSecret: "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",
    callbackURL: "http://localhost:3000/auth/google/callback",
    scope: ['profile'],
    accessType: 'offline',
    prompt: 'consent'
}, (accessToken, refreshToken, profile, cb) => {
    cb(null, { username: "test" });
}));
passport.serializeUser((user, cb) => {
    cb(null, user);
});
passport.deserializeUser((user, cb) => {
    cb(null, user);
});
app.use(session({ secret: 'fort4572', resave: false, saveUninitialized: true }));
app.use(passport.initialize());
app.use(passport.session());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static("./"));
app.use(cors());
function progress(req, res, next) {
    let progress = 0;
    const size = Number(req.headers['content-length']);
    req.on('data', async (data) => {
        progress += data.length;
        io.emit('fileProgress', Math.round((progress / size) * 100));
    });
    req.on('end', () => {
        console.log("file uploaded");
    });
    next();
}
app.put('/upload', progress, upload.single('file'), async (req, res) => {
    res.end();
});
app.delete('/delete', async (req, res) => {
    fs.unlinkSync(DESTINATION + req.body.filename);
    res.end();
});
app.get('/logout', isLoggedIn, (req, res) => {
    req.logout((err) => {
        res.redirect('/');
    });
});
app.get('/profile', isLoggedIn, (req, res) => {
    res.send(req.user.username).end();
});
app.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), (req, res) => {
    res.redirect('/profile');
});
app.get('/auth/google', passport.authenticate('google'));
app.get('/content/:filename', async (req, res) => {
    let stream;
    const { is_video } = req.query;
    const { filename } = req.params;
    const ext = is_video ? '.mp4' : '.jpg';
    const range = req.headers.range;
    const file_path = path.join(DESTINATION, filename + ext);
    if (!is_video)
        stream = fs.createReadStream(file_path);
    else {
        if (!range)
            res.status(400).end();
        else {
            const videoSize = fs.statSync(file_path).size;
            const start = Number(range.replace(/\D/g, ""));
            const end = Math.min(start + (10 ** 6), videoSize - 1);
            const contentLength = end - start + 1;
            res.writeHead(206, {
                'Content-Range': `bytes ${start}-${end}/${videoSize}`,
                'Accept-Ranges': 'bytes',
                'Content-Type': 'video/mp4',
                'Content-Length': contentLength
            });
            stream = fs.createReadStream(file_path, { start, end });
        }
    }
    if (stream)
        stream.pipe(res);
});
app.get('/', (req, res) => {
    res.render("index.html");
});
server.listen(3000, () => {
    createVideoPreviews();
    initDB();
    //container()
    //Container.get('BeanFactory').create()
    console.log("listening on port 3000");
});
// const cap = cv.VideoReader(path.join(__dirname,'/uploads/b5e8c579-5d65-45f5-87cc-2ba619e77cd0.mp4'))
// console.log(cap)
//# sourceMappingURL=data:application/json;base64,